name: Terraform Module Version Checker

on:
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:

  check_versions:
    runs-on: ubuntu-latest
    outputs:
      outdated: ${{ steps.check.outputs.outdated }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Buscar m√≥dulos locales
        id: check
        run: |
          OUTPUT_FILE="version_report.md"
          ISSUE_FILE="module_issues.txt"
          echo "# üì¶ Terraform Module Version Report" > "$OUTPUT_FILE"
          echo "_Generated on $(date)_" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          touch "$ISSUE_FILE"

          OUTDATED=0

          for dir in wrapper_*; do
            echo "üîé Revisando m√≥dulo: $dir"
            tf_file=$(find "$dir" -type f \( -name "*.tf" -o -name "*.tf.json" \))

            while read -r file; do
              # Buscar source y version dentro del archivo
              source_line=$(grep -E 'source\s+=\s+"registry\.terraform\.io/[^"]+"' "$file" || true)
              version_line=$(grep -E 'version\s+=\s+"[0-9]+\.[0-9]+\.[0-9]+"' "$file" || true)

              if [[ -n "$source_line" && -n "$version_line" ]]; then
                source=$(echo "$source_line" | sed -E 's/.*"([^"]+)".*/\1/')
                used_version=$(echo "$version_line" | sed -E 's/.*"([^"]+)".*/\1/')

                namespace=$(echo "$source" | cut -d'/' -f1)
                name=$(echo "$source" | cut -d'/' -f2)
                provider=$(echo "$source" | cut -d'/' -f3)

                API_URL="https://registry.terraform.io/v1/modules/${namespace}/${name}/${provider}/versions"
                RESPONSE=$(curl -s "$API_URL")

                if [[ -z "$RESPONSE" || "$RESPONSE" == "null" ]]; then
                  echo "‚ö†Ô∏è No se pudo consultar $source" | tee -a "$OUTPUT_FILE"
                  continue
                fi

                latest=$(echo "$RESPONSE" | jq -r '.modules[0].versions | map(.version) | sort_by(split(".") | map(tonumber)) | last')

                if [[ "$used_version" == "$latest" ]]; then
                  echo "‚úÖ \`$source\` est√° actualizado (**$used_version**)" | tee -a "$OUTPUT_FILE"
                else
                  echo "‚ùå \`$source\` est√° desactualizado (usado: **$used_version**, √∫ltimo: **$latest**)" | tee -a "$OUTPUT_FILE"
                  echo "${dir}|${source}|${used_version}|${latest}" >> "$ISSUE_FILE"
                  OUTDATED=1
                fi
              fi
            done <<< "$tf_file"
          done

          if [[ "$OUTDATED" == "1" ]]; then
            echo "outdated=true" >> "$GITHUB_OUTPUT"
          else
            echo "outdated=false" >> "$GITHUB_OUTPUT"
          fi

      - name: üì¶ Upload artifacts
        if: ${{ steps.check.outputs.outdated == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: module-version-check
          path: module_issues.txt  

  manage_issues:
    needs: check_versions
    if: needs.check_versions.outputs.outdated == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Descargar artifacts
        uses: actions/download-artifact@v4
        with:
          name: module-version-check
          path: module-version-check 

      - name: üè∑Ô∏è Asegurar label 'terraform'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh label list | grep -q '^terraform' || \
          gh label create terraform --description "Terraform module related issues" --color 623CE4

      - name: üêõ Crear o actualizar issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          while IFS="|" read -r carpeta source used latest; do
            title="Upgrade(${carpeta}): ${source} (${used} > ${latest})"

            issue_data=$(gh issue list --state open --json title,number --jq \
              '.[] | select(.title | startswith("Upgrade('"$carpeta"'):"))')

            if [[ -z "$issue_data" ]]; then
              echo "üåü Creando issue: $title"
              gh issue create \
                --title "$title" \
                --body "El m√≥dulo \`${source}\` en \`${carpeta}\` est√° desactualizado. Usado: \`${used}\`. √öltimo: \`${latest}\`." \
                --label terraform
            else
              number=$(echo "$issue_data" | jq -r '.number')
              old_title=$(echo "$issue_data" | jq -r '.title')

              if [[ "$old_title" != *"$latest"* ]]; then
                echo "‚úèÔ∏è Actualizando issue #$number"
                gh issue edit "$number" \
                  --title "$title" \
                  --body "El m√≥dulo \`${source}\` en \`${carpeta}\` est√° desactualizado. Usado: \`${used}\`. √öltimo: \`${latest}\`."
              else
                echo "‚úÖ Issue ya actualizado para $carpeta"
              fi
            fi
          done < module-version-check/module_issues.txt
